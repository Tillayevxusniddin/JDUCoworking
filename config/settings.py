"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-secret-key')
LAMBDA_WELCOME_EMAIL_URL = config('LAMBDA_WELCOME_EMAIL_URL', default=None)
LAMBDA_API_KEY = config('LAMBDA_API_KEY', default=None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_filters',
    'drf_spectacular',
    'django_apscheduler'
]

LOCAL_APPS = [
    'apps.users',
    'apps.workspaces',
    'apps.tasks',
    'apps.reports',
    'apps.meetings',
    'apps.jobs',
    'apps.notifications',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE':'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='coworking'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='xusniddin2004'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

GOOGLE_SERVICE_ACCOUNT_FILE = str(BASE_DIR / 'google_service_account.json')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# DRF Settings

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Digital University Coworking System API',
    'DESCRIPTION': """
    üéì **Digital University Coworking System API Documentation**
    
    This API is designed to manage coworking activities of university students.
    
    ## Main features:
    - üë§ User and role management (STUDENT (TEAMLEADER and SIMPLE), STAFF, RECRUITER, ADMIN)
    - üè¢ Coworking spaces and membership system
    - üìã Task and project management
    - üìä Reporting and salary calculations
    - ü§ù Meetings and video conferences
    - üíº Job postings and application system
    - üîî Notifications and messaging

    ## Authentication:
    Authenticated via JWT token. 
    1. Login via `/api/v1/auth/login/`
    2. Add the obtained `access_token` to the header in the format `Authorization: Bearer <token>`
    3. When the token expires, refresh it via `/api/v1/auth/token/refresh/`

    ## User Types:
    - **STUDENT [TEAMLEADER and SIMPLE]**: Talabalar - tasks, reporting, meetings
    - **STAFF**: Staff - working with students
    - **RECRUITER**: Recruiters - job postings
    - **ADMIN**: Administrators - full access
    """,
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
     'ENUM_NAME_OVERRIDES': {
        # users app
        'UserTypeEnum': 'apps.users.models.User.USER_TYPE_CHOICES',
        'StudentLevelStatusEnum': 'apps.users.models.Student.LEVEL_STATUS_CHOICES',
        
        # workspaces app
        'WorkspaceTypeEnum': 'apps.workspaces.models.Workspace.WorkspaceType',
        'WorkspaceMemberRoleEnum': 'apps.workspaces.models.WorkspaceMember.MEMBER_ROLE_CHOICES',

        # tasks app
        'TaskStatusEnum': 'apps.tasks.models.Task.STATUS_CHOICES',
        'TaskPriorityEnum': 'apps.tasks.models.Task.PRIORITY_CHOICES',
        
        # reports app
        'SalaryRecordStatusEnum': 'apps.reports.models.SalaryRecord.STATUS_CHOICES',
        'MonthlyReportStatusEnum': 'apps.reports.models.MonthlyReport.STATUS_CHOICES',

        # jobs app
        'JobStatusEnum': 'apps.jobs.models.Job.STATUS_CHOICES',
        'JobVacancyStatusEnum': 'apps.jobs.models.JobVacancy.STATUS_CHOICES',
        'VacancyApplicationStatusEnum': 'apps.jobs.models.VacancyApplication.STATUS_CHOICES',
        
        # meetings app
        'MeetingStatusEnum': 'apps.meetings.models.Meeting.Status',
        'MeetingAudienceTypeEnum': 'apps.meetings.models.Meeting.AudienceType',
        'MeetingAttendeeStatusEnum': 'apps.meetings.models.MeetingAttendee.Status',
    },
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'supportedSubmitMethods': ['get', 'post', 'put', 'delete', 'patch', 'head', 'options'],
    },
    'CONTACT': {
        'name': 'Development Team',
        'email': 'tillayevx1@gmail.com',
        'url': 'https://github.com/Tillayevxusniddin'
    },
    'LICENSE': {
        'name': 'MIT License',
    },
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Local server'
        },
    ],
    # JWT authentication uchun security scheme
    'SECURITY': [
        {
            'bearerAuth': []
        }
    ],
    'COMPONENTS': {
        'securitySchemes': {
            'bearerAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    },
}

#JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('SECRET_KEY'),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# REDOC_SETTINGS = {
#     'LAZY_RENDERING': True,
# }

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:8000',
    'http://127.0.1:8000',
]

# CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE